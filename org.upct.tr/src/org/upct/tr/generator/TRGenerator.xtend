/*
 * generated by Xtext 2.12.0
 */
package org.upct.tr.generator

import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.upct.tr.tR.ActionRule
import org.upct.tr.tR.Arith_term
import org.upct.tr.tR.Condition
import org.upct.tr.tR.EnumElem
import org.upct.tr.tR.Goals
import org.upct.tr.tR.PerVarParam
import org.upct.tr.tR.Percepts
import org.upct.tr.tR.Plusplus
import org.upct.tr.tR.Predication
import org.upct.tr.tR.Primitive_Type
import org.upct.tr.tR.Rule
import org.upct.tr.tR.SuperVarPar
import org.upct.tr.tR.Value
import org.upct.tr.tR.VarPar

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TRGenerator extends AbstractGenerator {

	private List<Goals> goals;
	private List<EObject> resources;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		this.resources = resource.allContents.toList;
		this.goals = this.resources.filter(Goals).toList;

		fsa.generateFile("tr.erl", compile);
	}

	def compile() {
		'''
			-module(tr).
			-export([
			«FOR goal : goals»
				«goal.name»/0«IF goals.size()-1 > goals.indexOf(goal)»,«ENDIF»
			«ENDFOR»
			]).
			
			«FOR goal : goals»
				«goal.compile»
			«ENDFOR»
		'''
	}

	def compile(Primitive_Type p) {
		'''
			bs:get_belief(«p.name»)
		'''
	}

	def compile(Goals g) {
		'''
			«g.name»() ->
			case {
			«FOR e : g.rules»
				«e.compile»
			«ENDFOR»
		'''
	}

	def compile(Rule r) {
		'''
			«FOR e : r.eAllContents.filter(Condition).toIterable»
				«e.compile»
			«ENDFOR»
		'''
	}

	def compile(Condition c) {
		'''
			«c.sc.predication.compile»
			«IF c.operators.size>0»			
				«FOR o : c.operators»
					«o.value»
				«ENDFOR»
			«ENDIF»
		'''
	}

	def compile(Predication p) {
		'''
			«IF p.condition!=null»
				«p.left.compile»«p.condition»«p.right.compile»
			«ENDIF»
		'''
	}

	def compile(Percepts p) {
		'''bs:is_belief(«p.name»)'''
	}

	def compile(ActionRule p) {
	}

	def compile(Plusplus p) {
	}

	def compile(Arith_term p) {
		'''
			«FOR el : p.eAllContents.toIterable»
				«el.compile»
			«ENDFOR»
		'''
	}

	def compile(PerVarParam p) {
		'''
			«FOR el : p.eAllContents.toIterable»
				«el.eClass.name»
			«ENDFOR»
		'''
	}

	def compile(SuperVarPar p) {
		'''
			«FOR el : p.eAllContents.toIterable»
				«el.eClass.name»
			«ENDFOR»
		'''
	}

	def compile(Value p) {
		'''
			«FOR el : p.eAllContents.toIterable»
				«el.compile»
			«ENDFOR»
		'''
	}

	def compile(EObject o) {

		switch o.eClass.name {
			case "Primitive_Type": {
				'''
					«FOR token : resources.filter(Primitive_Type).filter[it.hashCode == o.hashCode]»
						«token.compile»
					«ENDFOR»
				'''
			}
			case "Percepts": {
				'''
					«FOR token : resources.filter(Percepts).filter[it.hashCode == o.hashCode]»
						«token.compile»
					«ENDFOR»
				'''
			}
			case "Arith_term": {
				'''
					«FOR token : resources.filter(Arith_term).filter[it.hashCode == o.hashCode]»
						«token.compile»
					«ENDFOR»
				'''
			}
			case "Predication": {
				'''
					«FOR token : resources.filter(Predication).filter[it.hashCode == o.hashCode]»
						«token.compile»
					«ENDFOR»
				'''
			}
			case "Condition": {
				'''
					«FOR token : resources.filter(Condition).filter[it.hashCode == o.hashCode]»
						«token.compile»
					«ENDFOR»
				'''
			}
			case "PerVarParam": {
				'''
					«FOR token : resources.filter(PerVarParam).filter[it.hashCode == o.hashCode]»
						«token.compile»
					«ENDFOR»
				'''
			}
			case "SuperVarPar": {
				'''
					«FOR token : resources.filter(SuperVarPar).filter[it.hashCode == o.hashCode]»
						«token.compile»
					«ENDFOR»
				'''
			}
			case "EnumElem": {
				'''
					«FOR token : resources.filter(EnumElem).filter[it.hashCode == o.hashCode]»
						«token.eClass.name»
					«ENDFOR»
				'''
			}
			case "VarPar": {
				'''
					«FOR token : resources.filter(VarPar).filter[it.hashCode == o.hashCode]»
						«token.eClass.name»
					«ENDFOR»
				'''
			}
			default: {
				return o.eClass.name.toString;
			}
		}
	}

}
